#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
print(mean(samp1))
hist(x = samp1, col = "steelblue")
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
hist(x = samp1, col = "steelblue")
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
hist(x = samp1, col = "steelblue")
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
hist(x = samp1, col = "steelblue")
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
hist(x = samp1, col = "steelblue")
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
hist(x = samp1, col = "steelblue")
hist(x = samp1, col = "steelblue", breaks = 100)
hist(x = samp1, col = "steelblue", breaks = 10)
max = ceiling(max(samp1))
min = floor(min(samp1))
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, main = "One of the best random samples of the normal distribution of all time.", col = "steelblue", breaks = length())
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, main = "One of the best random samples of the normal distribution of all time.", col = "steelblue", breaks = length)
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, main = "One of the best random samples of the normal distribution of all time.", col = "steelblue", breaks = length)
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, main = "The best random sample of the normal distribution of all time.", col = "steelblue", breaks = length)
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, main = "The best random sample of the normal distribution of all time.", col = "steelblue", breaks = length)
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, main = "The best random sample of the normal distribution of all time.", col = "steelblue", breaks = length)
min(samp1)
max(samp1)
hist(x = samp1, main = "The best random sample of the normal distribution of all time.", col = "steelblue", breaks = length)
hist(x = samp1, xlab = "Values", main = "The best random sample of the normal distribution of all time.", col = "steelblue", breaks = length)
max(samp1)
library(tinytex)
# Default options for knitted documents can be set here
knitr::opts_chunk$set(echo = TRUE)
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, xlab = "Values", main = "The best random sample of a distribution of all time.", col = "steelblue", breaks = length)
min(samp1)
max(samp1)
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
# Default options for knitted documents can be set here
knitr::opts_chunk$set(echo = TRUE)
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, xlab = "Values", main = "The best random sample of a distribution of all time.", col = "steelblue", breaks = length)
min(samp1)
max(samp1)
# Perform steps 1 - 4 in this code chunk
#1
library(tinytex)
# Default options for knitted documents can be set here
knitr::opts_chunk$set(echo = TRUE)
install_tinytex()
tinytex::install_tinytex()
install.packages("tinyttex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("miktex")
install.packages("xfun")
install.packages("xfun")
# Perform steps 1 - 4 in this code chunk
#1
library(xfun)
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, xlab = "Values", main = "The best random sample of a distribution of all time.", col = "steelblue", breaks = length)
min(samp1)
max(samp1)
# Default options for knitted documents can be set here
knitr::opts_chunk$set(echo = TRUE)
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, xlab = "Values", main = "The best random sample of a distribution of all time.", col = "steelblue", breaks = length)
min(samp1)
max(samp1)
install.packages(c("astsa", "backports", "blob", "broom", "callr", "cli", "clipr", "colorspace", "cpp11", "crayon", "data.table", "DBI", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "farver", "fBasics", "fGarch", "forcats", "fs", "gargle", "generics", "ggplot2", "glue", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httr", "jsonlite", "knitr", "lifecycle", "lubridate", "magrittr", "mime", "modelr", "openssl", "pillar", "processx", "ps", "quantmod", "R6", "RColorBrewer", "Rcpp", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "timeSeries", "tseries", "tzdb", "uuid", "vctrs", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml", "zoo"))
install.packages(c("astsa", "backports", "blob", "broom", "callr", "cli", "clipr", "colorspace", "cpp11", "crayon", "data.table", "DBI", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "farver", "fBasics", "fGarch", "forcats", "fs", "gargle", "generics", "ggplot2", "glue", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httr", "jsonlite", "knitr", "lifecycle", "lubridate", "magrittr", "mime", "modelr", "openssl", "pillar", "processx", "ps", "quantmod", "R6", "RColorBrewer", "Rcpp", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "timeSeries", "tseries", "tzdb", "uuid", "vctrs", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml", "zoo"))
# Default options for knitted documents can be set here
knitr::opts_chunk$set(echo = TRUE)
# Perform steps 1 - 4 in this code chunk
#1
samp1 = rnorm(n = 100, mean = 12, sd = 3)
head(samp1)
length(samp1)
mean(samp1)
sd(samp1)
max = ceiling(max(samp1))
min = floor(min(samp1))
length = max - min
hist(x = samp1, xlab = "Values", main = "The best random sample of a distribution of all time.", col = "steelblue", breaks = length)
min(samp1)
max(samp1)
qnorm(.99, mean = 30, sd = sqrt(6))
pnorm(35.69837, mean = 30, sd = sqrt(6))
60-35.69837
.30163*60
knitr::opts_chunk$set(echo = TRUE)
qnorm(.99, mean = 30, sd = sqrt(6))
a
a <- qnorm(.99, mean = 30, sd = sqrt(6))
a
syc <- syc
syc <- read.csv("~/MS in Statistics/syc.csv")
View(syc)
library(SDAResources)
syc <- syc
facilities <- unique(syc[which(is.na(syc$livewith)), "facility"])
facilities
fac_1 <- syc[syc$facility == 21,]
fac_2 <- syc[syc$facility == 29,]
fac_3 <- syc[syc$facility == 49,]
fac_4 <- syc[syc$facility == 7,]
fac_1 <- cbind("livewith" = fac_1$livewith, "agefirst" = fac_1$agefirst)
fac_2 <- cbind("livewith" = fac_2$livewith, "agefirst" = fac_2$agefirst)
fac_3 <- cbind("livewith" = fac_3$livewith, "agefirst" = fac_3$agefirst)
fac_4 <- cbind("livewith" = fac_4$livewith, "agefirst" = fac_4$agefirst)
fac_1
t(fac_1)
table(fac_1)
fac_1 <- syc[syc$facility == 21,]
table(fac_1)
fac_2
table(fac_1)
library(SDAResources)
syc <- syc
facilities <- unique(syc[which(is.na(syc$livewith)), "facility"])
facilities
fac_1 <- syc[syc$facility == 21,]
fac_2 <- syc[syc$facility == 29,]
fac_3 <- syc[syc$facility == 49,]
fac_4 <- syc[syc$facility == 7,]
fac_1 <- cbind("livewith" = fac_1$livewith, "agefirst" = fac_1$agefirst)
fac_2 <- cbind("livewith" = fac_2$livewith, "agefirst" = fac_2$agefirst)
fac_3 <- cbind("livewith" = fac_3$livewith, "agefirst" = fac_3$agefirst)
fac_4 <- cbind("livewith" = fac_4$livewith, "agefirst" = fac_4$agefirst)
table(fac_1)
data.frame(fac_1)
print(data.frame(fac_1))
fac_1$livewith
fac_1[1]
fac_1[1][1]
fac_1[1][2]
fac_1[1][3]
fac_1[1,1]
fac_1[1,2]
fac_1[1,3]
fac_1[1,1]
fac_1[2,1]
fac_1[3,1]
fac_1[33,1] <- 3
fac_2[12,1] <- 3
fac_3[100,1] <- 3
fac_1[33,1] <- 3
fac_2[12,1] <- 3
fac_3[100,1] <- 3
fac_1
fac_2
fac_3
library(SDAResources)
syc <- syc
facilities <- unique(syc[which(is.na(syc$livewith)), "facility"])
facilities
fac_1 <- syc[syc$facility == 21,]
fac_2 <- syc[syc$facility == 29,]
fac_3 <- syc[syc$facility == 49,]
fac_4 <- syc[syc$facility == 7,]
fac_1 <- cbind("livewith" = fac_1$livewith, "agefirst" = fac_1$agefirst)
fac_2 <- cbind("livewith" = fac_2$livewith, "agefirst" = fac_2$agefirst)
fac_3 <- cbind("livewith" = fac_3$livewith, "agefirst" = fac_3$agefirst)
fac_4 <- cbind("livewith" = fac_4$livewith, "agefirst" = fac_4$agefirst)
fac_1[34,1] <- 3
fac_2[12,1] <- 3
fac_3[106,1] <- 3
fac_1
fac_2
fac_3
fac_4
knitr::opts_chunk$set(echo = TRUE)
fav_dog_data <- c("Apollo", "Penny", "Penny", "Penny", "Penny")
fav_dog_factor <- factor(fav_dog_data)
#voting for favorite dog
name_of_voter <- c("Luis", "Fob", "Bob", "Rob", "Lob") #unique voters voting
fav_dog_data <- c("Apollo", "Penny", "Penny", "Penny", "Penny") #voters favorite dog
weight_in_kg <- c(1,10,20,30,40) #weight in kg of voter
df <- data.frame(name_of_voter,fav_dog_data,weight_in_kg)
print(df)
df <- data.frame("Name of Voter" = name_of_voter,fav_dog_data,weight_in_kg)
print(df)
#voting for favorite dog
name_of_voter <- c("Luis", "Fob", "Bob", "Rob", "Lob") #unique voters voting
fav_dog_data <- c("Apollo", "Penny", "Penny", "Penny", "Penny") #voters favorite dog
weight_in_kg <- c(1,10,20,30,40) #weight in kg of voter
df <- data.frame(name_of_voter,fav_dog_data,weight_in_kg)
print(df)
barplot(df$fav_dog_data)
barplot(count(df$fav_dog_data))
plot(df)
plot(df$fav_dog_data)
plot(x = factor(df$fav_dog_data))
plot(x = factor(df$fav_dog_data), main = "Vote count for voters favorite dog")
library(ggplot2)
library(Sleuth3)
install.packages("MASS")
library(ggplot2)
library(Sleuth3)
library(MASS)
#voting for favorite dog
name_of_voter <- c("Luis", "Fob", "Bob", "Rob", "Lob") #unique voters voting
fav_dog_data <- c("Apollo", "Penny", "Penny", "Penny", "Penny") #voters favorite dog
weight_in_kg <- c(1,10,20,30,40) #weight in kg of voter
df <- data.frame(name_of_voter,fav_dog_data,weight_in_kg)
print(df)
plot(x = factor(df$fav_dog_data), main = "Vote count for voters favorite dog")
mammals <- mammals
View(mammals)
mammals <- mammals
fit <- lm(brain ~ body, data=mammals)
summary(mod)
mammals <- mammals
fit <- lm(brain ~ body, data=mammals)
summary(fit)
mod <- lm(brain ~ body, data=mammals)
summary(mod)
fit$coefficients[0]
fit$coefficients[1]
fit$coefficients[2]
fit$coefficients[1]
B_0 <- fit$coefficients[1]
sd <- fit$residuals
sd
sd <- fit$residuals$sigma
sd <- summary(fit)$residuals$sigma
sd <- summary(fit)
sd
summary <- summary(fit)
residuals <- summary$residuals
fit$residuals
residuals <- fit$residuals
residuals
se <- residuals$sigma
residuals <- fit$residuals
se <- residuals$sigma
summary <- summary(fit)
residuals <- summary$residuals
se <- residuals$sigma
se <- fit$sigma
se
mammals <- mammals
fit <- lm(brain ~ body, data=mammals)
summary(fit)
sd(fit$residuals)
length(fit$residuals)
sum(fit$residuals)/60
sum(fit$residuals)
sd(fit$df.residual)
sd(fit$residual)
mammals <- mammals
fit <- lm(brain ~ body, data=mammals)
summary(fit)
fit$sigma
View(fit)
sigma(fit)
se <- sigma(fit)
log <- log(mammals$body)
log
log_body <- log(mammals$body)
log_brain <- log(mammals$brain)
df$log_body <- log_body
log_body <- log(mammals$body)
log_brain <- log(mammals$brain)
mammals$log_body <- log_body
mammals$log_brain <- log_brain
log_body <- log(mammals$body)
log_brain <- log(mammals$brain)
mammals$log_body <- log_body
mammals$log_brain <- log_brain
mammals
fit <- lm(log_brain ~ log_body, data=mammals)
summary(fit)
cats <- cats
plot(cats$Bwt,cats$Hwt)
View(cats)
plot(cats$Bwt,cats$Hwt)
fit <- lm(Hwt ~ Bwt, data = cats
fit <- lm(Hwt ~ Bwt, data = cats)
fit <- lm(Hwt ~ Bwt, data = cats)
summary(fit)
abline(fit)
plot(cats$Bwt,cats$Hwt)
abline(fit)
t.test(cats$Hwt)
B_0_hypothesis <- 4
B_0_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
B_0_hypothesis <- 4
B_0_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
t_stat
B_0_hypothesis <- 0
B_0_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
t_stat
pt(16.11939)
pt(16.11939, df = 143)
1-pt(16.11939, df = 143)
fit$df
B_0_hypothesis <- 0
B_0_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
p_value <- 2*(1-pt()
B_0_hypothesis <- 0
B_0_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
t_stat
p_value <- 2*(1-pt(t_stat, fit$df.residual))
p_value
B_0_hypothesis <- 4
B_0_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
t_stat
p_value <- 2*(1-pt(t_stat, fit$df.residual))
p_value
B_0_hypothesis <- 3.75
B_0_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
t_stat
p_value <- 2*(1-pt(t_stat, fit$df.residual))
p_value
predicted <- B_0 + B_1_estimated*2.25
B_1_hypothesis <- 3.75
B_1_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
t_stat
p_value <- 2*(1-pt(t_stat, fit$df.residual))
p_value
predicted <- B_0 + B_1_estimated*2.25
predicted
cats <- cats
plot(cats$Bwt,cats$Hwt)
fit <- lm(Hwt ~ Bwt, data = cats)
summary(fit)
plot(cats$Bwt,cats$Hwt)
abline(fit)
B_1_hypothesis <- 3.75
B_1_estimated <- fit$coefficients[2]
difference <- B_0_estimated - B_0_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
t_stat
p_value <- 2*(1-pt(t_stat, fit$df.residual))
p_value
predicted <- B_0 + B_1_estimated*2.25
predicted
fit$coefficients[2]
B_0
fit <- lm(Hwt ~ Bwt, data = cats)
summary(fit)
plot(cats$Bwt,cats$Hwt)
abline(fit)
B_1_hypothesis <- 3.75
B_1_estimated <- fit$coefficients[2]
difference <- B_1_estimated - B_1_hypothesis
se <- summary(fit)$coefficients[2, 2]
t_stat <- difference/se
t_stat
p_value <- 2*(1-pt(t_stat, fit$df.residual))
p_value
predicted <- B_0 + B_1_estimated*2.25
predicted
B_0
intercept <- fit$coefficients[2]
predicted <- intercept + B_1_estimated*2.25
predicted
intercept <- fit$coefficients[1]
predicted <- intercept + B_1_estimated*2.25
predicted
